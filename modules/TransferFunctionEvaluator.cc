/*
 *  MoMEMta: a modular implementation of the Matrix Element Method
 *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <momemta/Logging.h>
#include <momemta/Module.h>
#include <momemta/ParameterSet.h>
#include <momemta/Types.h>
#include <momemta/Utils.h>

#include <Math/DistFunc.h>


//FIX DOCUMENTATION
/** \brief Transfer function on energy described by a Gaussian distribution
 *
 * This module takes as inputs a LorentzVector and a phase-space point, generates
 * a new LorentzVector with a different energy (keeping direction and invariant mass),
 * and evaluates the transfer function on the "reconstructed" and "generated" energies.
 *
 * The transfer function (TF) is a Gaussian distribution that describes the difference between 
 * the reconstructed and the generated energy (\f$E_{rec}-E_{gen}\f$). The width of the distribution depends 
 * on the "reconstructed" energy and it is set as parameter. 
 *
 * ### Integration dimension
 *
 * This module adds **1** dimension to the integration.
 *
 * ### Parameters
 *
 *   | Name | Type | %Description |
 *   |------|------|--------------|
 *   | `sigma` | double | Fraction of the "reconstructed" energy corresponding to the sigma of the Gaussian distribution. |
 *   | `sigma_range` | double | Range of integration expressed in times of sigma. |
 * 
 * ### Inputs
 *
 *   | Name | Type | %Description |
 *   |------|------|--------------|
 *   | `ps_point` | double | Phase-space point generated by CUBA. |
 *   | `reco_particle` | LorentzVector | Input LorentzVector (experimentally reconstructed particle). |
 *
 * ### Outputs
 *
 *   | Name | Type | %Description |
 *   |------|------|--------------|
 *   | `output` | LorentzVector | Output *generated* LorentzVector, only differing from *reco_particle* by its energy. |
 *   | `TF_times_jacobian` | double | Product of the TF evaluated on the *reco* and *gen* energies, times the jacobian of the transformation needed stretch the integration range from \f$[0,1]\f$ to the width of the TF, times the jacobian \f$dE/d|P|\f$ due to the fact that the integration is done w.r.t \f$|P|\f$, while the TF is parametrised in terms of energy. |
 * 
 * \ingroup modules
 */
class TransferFunctionEvaluator: public Module {
    public:

        TransferFunctionEvaluator(PoolPtr pool, const ParameterSet& parameters): Module(pool, parameters.getModuleName()) {
            m_input1 = parameters.get<InputTag>("reco_particle");
            m_input2 = parameters.get<InputTag>("gen_particle");

            m_input1.resolve(pool);
            m_input2.resolve(pool);

            m_sigma = parameters.get<double>("sigma", 0.10);
            m_sigma_range = parameters.get<double>("sigma_range", 5);
        };

        virtual void work() override {

            const LorentzVector& reco_particle = m_input1.get<LorentzVector>();
            const LorentzVector& gen_particle = m_input2.get<LorentzVector>();

            double sigma = reco_particle.E() * m_sigma;
            double gen_E = gen_particle.E();

            // Compute TF
            *TF = ROOT::Math::normal_pdf(gen_E, sigma, reco_particle.E());
        }

        virtual size_t dimensions() const override {
            return 0;
        }

    private:
        InputTag m_input1;
        InputTag m_input2;

        double m_sigma;
        double m_sigma_range;

        std::shared_ptr<double> TF = produce<double>("TF");

};
REGISTER_MODULE(TransferFunctionEvaluator);
